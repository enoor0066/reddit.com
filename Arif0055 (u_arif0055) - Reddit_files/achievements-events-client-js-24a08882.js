import{a as e,t,_ as i,n as s,P as a,b4 as n,J as r,O as o,o as c,cl as h,T as m,l,L as u,cm as p,e as d}from"./shell-c6dfa469.js";import{ab as v}from"./age-gate-standalone-client-js-cd633927.js";import{s as b,x as g}from"./icon-5ce37e54.js";const y=e(b);let I=class extends y{constructor(){super(...arguments),this.userId=null,this.isProgressToastFeatureActivated=!1,this.pubsub=new a(this),this.achievementNotificationSubscriptionController=new n(this),this.onAchievementNotificationRecieved=async e=>{if(e&&"achievements"===e.gameID)try{const e=await r({operation:o.AchievementUnlockedNotifications,variables:{maxImageWidth:32}}),t=[],i=e.data.identity?.redditor.trophyCase?.notifications;i?.forEach((e=>{if(t.push(e.id),"StreakExtendedNotification"===e.__typename)this.activateProgressToast({open:!0,notificationType:v.STREAK_EXTENDED,streakLength:e.length});else if("TrophyProgressedNotification"===e.__typename){const t=e.trophy;"AchievementImageTrophy"===t.__typename&&this.activateProgressToast({open:!0,notificationType:v.TROPHY_PROGRESSED,numberCompleted:t.progress?.done,total:t.progress?.total,progressUnit:t.progress?.unit,imgSrc:t.lockedImage.url,achievementId:t.id})}else if("TrophyUnlockedNotification"===e.__typename){const t=e.trophy;"AchievementImageTrophy"!==t.__typename&&"AchievementRepeatableImageTrophy"!==t.__typename||this.activateProgressToast({open:!0,notificationType:v.TROPHY_UNLOCKED,message:t.name,imgSrc:t.lockedImage.url,unlockedImgSrc:t.gridImage.url,achievementId:t.id})}})),t&&t.length>0&&this.deleteAchievementNotifications(t)}catch(e){window.Sentry?.captureError?.(e)}},this._activateFeature=async e=>c(e)}async activateProgressToast(e){if(!this.getIsAchievementsUpdatesEnabled())return;const t=!!document.querySelector("achievement-progress-toast");if(!this.isProgressToastFeatureActivated&&!t)try{this.isProgressToastFeatureActivated=!0,await this._activateFeature({name:h})}catch(e){this.isProgressToastFeatureActivated=!1}this.pubsub.publish(m.AchievementsProgressToast,e)}getIsAchievementsUpdatesEnabled(){try{if(!l.isAvailable())return!0;const e=l.getItem(`${u.AchievementsUpdatesEnabled}-${this.userId}`);return null===e||JSON.parse(e)}catch(e){window.Sentry?.captureError?.(e)}return!0}async connectedCallback(){super.connectedCallback(),this.getIsAchievementsUpdatesEnabled()&&this.subscribeToAchievementNotifications(),l.isAvailable()&&l.getItem(u.AchievementsStore)===`${this.userId}-${p.Enrolled}`||this.enrollUserIntoAchievements()}async deleteAchievementNotifications(e){try{await r({operation:o.DeleteAchievementNotifications,variables:{ids:e}})}catch(e){window.Sentry?.captureError?.(e)}}async enrollUserIntoAchievements(){try{const e=await r({operation:o.EnrollInStreaks,variables:{input:{timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,gameId:"achievements"}}}),t=e.data?.enrollInGamification?.ok;if(!t)return;l.isAvailable()&&l.setItem(u.AchievementsStore,`${this.userId}-${e.data?.enrollInGamification?.status||""}`)}catch(e){window.Sentry?.captureError?.(e)}}subscribeToAchievementNotifications(){try{this.achievementNotificationSubscriptionController.subscribe({query:{operationName:"SubscribeSubscription",query:"\n            subscription SubscribeSubscription($input: SubscribeInput!) {\n              subscribe(input: $input) {\n                ... on BasicMessage {\n                  data {\n                    ... on GamificationAccomplishmentsMessageData {\n                      gameID\n                    }\n                  }\n                }\n              }\n            }\n            ",variables:{input:{channel:{teamOwner:"I18N",category:"GAMIFICATION",userID:this.userId}}}},onData:async e=>{this.onAchievementNotificationRecieved(e?.data?.subscribe.data)}})}catch(e){window.Sentry?.captureError?.(e)}}render(){return g``}};I.styles=[t],i([s({type:String,attribute:"user-id"})],I.prototype,"userId",void 0),I=i([d("achievement-events")],I);

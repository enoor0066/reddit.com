import{J as e,O as t,M as i,a as s,K as o,c as n,G as r,T as a,t as d,_ as l,n as c,g as h,e as p,eo as u,fM as m,e_ as b,cS as g,ag as f,u as v,v as y,fN as k,p as w,P as S,al as I,ak as C,au as x,l as E,L as T,aw as N}from"./shell-c6dfa469.js";import{n as U,i as R,a as M,u as O,b as A,c as D,d as B,N as L,e as P,f as H,g as $,h as j,j as K,k as F,m as V,l as q,o as z,p as _}from"./announcement-overflow-menu-41830881.js";import{A as Y,x as J,s as G,u as X,I as Z,a8 as Q,a7 as W,y as ee,a as te}from"./icon-5ce37e54.js";import{p as ie,j as se}from"./age-gate-standalone-client-js-cd633927.js";import{l as oe}from"./list-item-header-b6f6e197.js";import"./select-controller-d006e214.js";import"./keyed-99fc4771.js";import"./rpl-menu-bf54c7f2.js";import"./rpl-menu-item-db2a1131.js";import"./rpl-dropdown-121fd78b.js";import{i as ne}from"./community-onboarding-completed-modal-client-js-ab917ec7.js";import"./all-chats-page-recommendations-client-js-3b956ac4.js";import"./shreddit-spoiler-38d883a5.js";import"./shreddit-share-list-item-3e304164.js";import"./mod-log-takedown-preview-client-js-bd84b2cf.js";import"./shop-gallery-data-fetcher-client-js-231ccd6c.js";import"./rpl-coachmark-card-8ea10924.js";import"./rpl-coachmark-4284fa96.js";import"./user-flair-12bd75e0.js";import"./rpl-popper-f72a534b.js";import"./hovercard.base-5a4bceca.js";import"./hui-user-drawer-client-js-b156b2df.js";import"./TinyGesture-89d9957c.js";import"./with-share-9791add8.js";import"./promote-post-actions-controller-df3244ab.js";import"./utils-69251401.js";import"./content-action-button-65361605.js";import"./index-7436fa38.js";import"./header-action-item-chat-client-js-c7de2bbd.js";import"./tooltip.base-bfe82f7d.js";import"./profile-creation-1805660b.js";import"./awards-bc027552.js";const re=new Set([i.CommentReply,i.PostReply,i.PrivateMessage,i.UsernameMention]);function ae(e,t,i){window.Sentry?.captureMessage?.(`Unexpected inbox mark as read error id: ${t}, type: ${i}, err: ${JSON.stringify(e)}`)}let de=class extends(s(o(G))){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isM2InboxExperiment=!1,this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:e}])=>{e&&!this.isViewed&&(this.trackEvent(U(this.getTrackEventProperties())),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async e=>{(!this.hasLink||this.isDeletedPost||this.isRemovedPost||R(e))&&e.preventDefault();return!!e.target?.closest("notification-context-menu")||this.trackEvent(M({...this.getTrackEventProperties(),clickTarget:"notification"})),this.isDeletedPost?this.showAlert({message:"Sorry this post was deleted"}):this.isRemovedPost&&this.showAlert({message:"This content is no longer available"}),await this.fireReadEvent(),!1},this.getUnreadChildElement=()=>this.isM2InboxExperiment?this.querySelector("rpl-inbox-row[selected]"):this.querySelector(`.${O}`),this.fireReadEvent=async()=>{this.getUnreadChildElement()&&(this.removeUnreadState(),await async function(i,s){if(i)try{let o;re.has(s)?(o=await e({operation:t.MarkPrivateMessageAsRead,variables:{input:{messageId:i}}}),ae(o.data.markPrivateMessageAsRead?.errors,i,s)):(o=await e({operation:t.MarkNotificationRead,variables:{input:{notificationId:i}}}),ae(o.data.readNotificationLoggedIn?.errors,i,s))}catch(e){}}(this.notificationId,this.messageType))},this.removeUnreadState=()=>{const e=this.getUnreadChildElement();e&&(this.isM2InboxExperiment?e.removeAttribute("selected"):e.classList.remove(O))},this.showAlert=({message:e})=>this.dispatchEvent(n("faceplate-alert",{level:r.warning,message:e})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${A}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){this.trackEvent(D(this.getTrackEventProperties())),this.querySelector("a")?.addEventListener("click",this.onClick),this.isM2InboxExperiment&&this.querySelector("rpl-inbox-row")?.addEventListener("click",this.onClick),this.subscribe(a.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(a.InboxReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?Y:J`<slot></slot>`}};de.styles=[d],l([c({type:Boolean,attribute:"is-viewed",reflect:!0})],de.prototype,"isViewed",void 0),l([c({type:Boolean,attribute:"is-deleted-post"})],de.prototype,"isDeletedPost",void 0),l([c({type:Boolean,attribute:"is-removed-post"})],de.prototype,"isRemovedPost",void 0),l([c({type:String,attribute:"notification-id"})],de.prototype,"notificationId",void 0),l([c({type:String,attribute:"message-type"})],de.prototype,"messageType",void 0),l([c({type:Boolean,attribute:"has-link"})],de.prototype,"hasLink",void 0),l([c({type:Boolean,attribute:"is-m2-inbox-experiment"})],de.prototype,"isM2InboxExperiment",void 0),l([h()],de.prototype,"isHidden",void 0),de=l([p("notification-item")],de);const le="inbox_banner_seen_count_store";function ce({currentStorageData:e,userId:t,inboxBannerName:i}){return e?.[t]?.find((e=>e.inboxBannerName===i))?.seenCount??0}function he({userId:e,inboxBannerName:t,seenCount:i,currentStorageData:s={}}){const o={...s||{},[e]:[{inboxBannerName:t,seenCount:i}]};se(le,o)}let pe=class extends G{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0,this.userId&&this.name&&this.maxViews&&function({userId:e,inboxBannerName:t,seenCount:i}){he({userId:e,currentStorageData:ie(le),inboxBannerName:t,seenCount:i})}({userId:this.userId,inboxBannerName:this.name,seenCount:this.maxViews})},this.onClick=e=>{R(e)&&e.preventDefault()}}firstUpdated(){if(this.querySelectorAll(`[data-id="${B}"`).forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)})),this.userId&&this.name){const e=function({userId:e,inboxBannerName:t}){return ce({userId:e,inboxBannerName:t,currentStorageData:ie(le)})}({userId:this.userId,inboxBannerName:this.name});void 0!==this.maxViews&&e>=this.maxViews?this.isHidden=!0:function({userId:e,inboxBannerName:t}){const i=ie(le);he({userId:e,currentStorageData:i,inboxBannerName:t,seenCount:ce({userId:e,inboxBannerName:t,currentStorageData:i})+1})}({userId:this.userId,inboxBannerName:this.name})}}render(){return this.isHidden?Y:J`<slot></slot>`}};pe.styles=[d],l([h()],pe.prototype,"isHidden",void 0),l([c({type:Object})],pe.prototype,"colorMap",void 0),l([c({type:String,attribute:"user-id"})],pe.prototype,"userId",void 0),l([c({type:String})],pe.prototype,"name",void 0),l([c({type:Number,attribute:"max-views"})],pe.prototype,"maxViews",void 0),pe=l([p("notification-inbox-banner")],pe);const ue=({notificationLevel:e,isEnablingUpdates:t})=>{if(t)switch(e){case u.Off:case null:return u.Low;case u.Low:case u.Frequent:default:return u.Frequent}else switch(e){case u.Frequent:return u.Low;case u.Low:default:return u.Off}};let me=class extends(s(o(G))){constructor(){super(...arguments),this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.subredditName="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.shouldDecoupleInboxSettings=!1,this.isMobile=!1,this.isM2InboxExperiment=!1,this.followedKeywordId="",this.followedKeyword="",this.isDialogOpened=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===u.Off,this.getIsRead=()=>this.isM2InboxExperiment?!this.querySelector("rpl-inbox-row[selected]"):!this.closest("notification-item")?.querySelector(`.${O}`),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[i.ChatAcceptInvite,i.ChatMessage,i.ChatMessageReaction,i.ChatRequest,i.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.shouldRenderManageThisNotification=()=>this.shouldDecoupleInboxSettings&&this.messageType,this.shouldRenderRemoveKeywordAlert=()=>!(!this.followedKeyword||!this.followedKeywordId||this.messageType!==i.KeywordFollow),this.shouldRenderTurnOffKeywordAlerts=()=>this.messageType===i.KeywordFollow,this.hideNotification=async()=>{try{const i=await e({operation:t.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}});if(i.data.deleteInboxNotifications?.ok)return this.showAlert({level:r.notice,message:"Notification removed"}),void this.publish(a.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async i=>{try{this.notificationLevel=i?this.initialNotificationLevel:u.Off;const s=await e({operation:t.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:i,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}});if(s.data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:L.HideSubreddit,isDo:!i,doConfig:{message:"Success! You won't see updates from this subreddit in the future.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Success! Hiding updates from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=i?u.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async i=>{this.notificationLevel=ue({isEnablingUpdates:i,notificationLevel:this.notificationLevel});try{const s=await e({operation:t.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:i}}});if(s.data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:L.DisableNotificationType,isDo:!i,doConfig:{message:"Success! You'll see less from this subreddit in the future.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Success! Seeing less from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=ue({isEnablingUpdates:!i,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async i=>{try{const s=await e({operation:t.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:i?m.Send:m.DoNotSend}}});if(s.data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:L.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this post in the future.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async i=>{try{const s=await e({operation:t.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:i?m.Send:m.DoNotSend}}});if(s.data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:L.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this comment in the future.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async i=>{try{const s=await e({operation:t.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:i}}});if(s.data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:L.BlockUser,isDo:i===b.Blocked,doConfig:{message:`u/${this.userName} is now blocked.`,undoOnClick:()=>this.changeUserBlockStatus(b.None)},undoConfig:{message:`u/${this.userName} is now unblocked.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.removeKeywordAlert=async()=>{if(this.followedKeywordId){try{const i=await e({operation:t.UpdateFollowedKeywords,variables:{input:{keywords:[{keywordId:this.followedKeywordId,followState:g.Unfollowed}]}}});if(i.data.updateFollowedKeywords?.ok)return void this.showAlert({level:r.notice,message:"Success! You will no longer see updates for this keyword."})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})}},this.turnOnKeywordAlerts=async()=>{try{const s=await e({operation:t.UpdateInboxNotificationPreferences,variables:{input:{preferences:[{messageType:i.KeywordFollow,isEnabled:!0}]}}});if(s.data.updateInboxNotificationPreferences?.ok)return void this.handleAlerts({actionInfoType:L.ManageNotification,isDo:!1,doConfig:{message:"Success! You won’t see keyword alerts in the future.",undoOnClick:()=>this.turnOnKeywordAlerts()},undoConfig:{message:"Success! Keyword alerts have been turned back on."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.turnOffKeywordAlerts=async()=>{try{const s=await e({operation:t.UpdateInboxNotificationPreferences,variables:{input:{preferences:[{messageType:i.KeywordFollow,isEnabled:!1}]}}});if(s.data.updateInboxNotificationPreferences?.ok)return void this.handleAlerts({actionInfoType:L.DisableNotificationType,isDo:!0,doConfig:{message:"Success! You won’t see keyword alerts in the future.",undoOnClick:()=>this.turnOnKeywordAlerts()},undoConfig:{message:"Success! Keyword alerts have been turned back on."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:e,actionInfoType:t,doConfig:i,undoConfig:s})=>{e?this.showAlert({level:r.notice,message:i.message,undoOnClick:i.undoOnClick,actionInfoType:t}):this.showAlert({level:r.notice,message:s.message})},this.showAlert=({level:e=r.error,message:t="Something went wrong",undoOnClick:i,actionInfoType:s})=>this.dispatchEvent(n("faceplate-alert",{level:e,message:t,cause:e===r.error?f.UncaughtError:void 0,namedContent:i&&s?{action:v({children:"Undo",attributes:{onclick:()=>{i(),this.trackEvent(F(this.getTrackClickOptionProperties(s)))}}})}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Hide",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification",hasRedirect:!1}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Don't get updates on this",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment",hasRedirect:!1}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:this.subredditName?`Turn off r/${this.subredditName} notifications`:"Disable updates from this community",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit",hasRedirect:!1}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Block this user ",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.BlockUser))),this.changeUserBlockStatus(b.Blocked)),dataTestId:"block-user",hasRedirect:!1}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"See less from this community",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less",hasRedirect:!1}),this.renderManageThisNotification=()=>this.renderMenuElement({label:"Manage this notification",onClick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.ManageNotification))),this.redirect(`/settings/notifications?open_modal=${this.messageType}`),Promise.resolve()),dataTestId:"manage-notification",hasRedirect:!0}),this.renderOverflowHorizontalBtn=()=>J` <faceplate-tracker source="${H}" action="click" noun="${$}" data-faceplate-tracking-context="${JSON.stringify(j(this.getTrackEventProperties()))}"> ${v({appearance:"plain",attributes:{type:"button","data-testid":"overflow-horizontal-button",slot:"menu","aria-label":"Open notification actions",onclick:()=>{this.openRplDialog()}},leadingIcon:X({size:Z.Small}),size:y.Small})} </faceplate-tracker> `,this.renderRemoveKeywordAlert=e=>this.renderMenuElement({label:`Remove "${e}" keyword alert`,onClick:()=>(this.trackEvent(P(this.getTrackClickOptionProperties(L.ManageNotification))),this.removeKeywordAlert()),dataTestId:"remove-keyword-alert",hasRedirect:!1}),this.renderTurnOffKeywordAlerts=()=>this.renderMenuElement({label:"Turn off keyword alerts",onClick:()=>(this.trackEvent(P(this.getTrackClickOptionProperties(L.DisableNotificationType))),this.turnOffKeywordAlerts()),dataTestId:"turn-off-keyword-alerts",hasRedirect:!1}),this.renderRemoveBtn=()=>this.isM2InboxExperiment&&!this.isMobile&&this.isHideEligible?v({appearance:"plain",leadingIcon:Q({size:Z.Small}),size:y.Small,attributes:{"data-testid":"delete-notification",onclick:()=>(this.closeRplDialog(),this.trackEvent(P(this.getTrackClickOptionProperties(L.HideNotification))),this.hideNotification()),slot:"hover-actions"}}):Y,this.closeRplDialog=()=>{this.isDialogOpened=!1},this.openRplDialog=()=>{this.isDialogOpened=!0},this.redirect=e=>{window.location.href=e},this.renderMenuElement=({label:e,onClick:t,dataTestId:i,hasRedirect:s})=>this.isM2InboxExperiment?J` <rpl-menu-item size="small" data-testid="${i}" @click="${t}"> ${e} </rpl-menu-item> `:oe({onClick:t,label:e,trailingSlot:s?W():void 0,attributes:{role:"menuitem","data-testid":i}}),this.onOpenMenu=()=>this.trackEvent(K(this.getTrackEventProperties())),this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:!0,isClicked:this.getIsRead()})}render(){const e=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null,this.shouldRenderManageThisNotification()?this.renderManageThisNotification():null,this.shouldRenderRemoveKeywordAlert()?this.renderRemoveKeywordAlert(this.followedKeyword):null,this.shouldRenderTurnOffKeywordAlerts()?this.renderTurnOffKeywordAlerts():null].filter(Boolean),t=J` <rpl-modal-card> <div slot="title"> Options </div> <div slot="close-button"> ${v({appearance:"secondary",leadingIcon:ee({size:Z.Small}),size:y.Small,attributes:{style:"line-height: initial;",onclick:()=>{this.closeRplDialog()}}})} </div> <rpl-menu> ${e} </rpl-menu> </rpl-modal-card> `;return 0===e.length?Y:J` <div class="flex gap-1"> ${this.renderRemoveBtn()} ${this.isM2InboxExperiment?this.isMobile?J`<div> ${this.renderOverflowHorizontalBtn()} <rpl-dialog-sheet dialog-id="dialog-notification-overflow-menu-${this.notificationId}" force-variant="bottom-sheet" .open="${this.isDialogOpened}" @rpl-dialog-sheet:after-hide="${()=>{this.isDialogOpened=!1}}" .litTemplateChildren="${t}"> </rpl-dialog-sheet> </div>`:J` <rpl-dropdown placement="bottom-end"> ${this.renderOverflowHorizontalBtn()} <rpl-menu slot="content"> ${e} </rpl-menu> </rpl-dropdown> `:J` <faceplate-dropdown-menu position="bottom-end"> ${this.renderOverflowHorizontalBtn()} <faceplate-menu slot="menu" class="block bg-neutral-background"> ${e} </faceplate-menu> </faceplate-dropdown-menu>`} </div> `}};me.styles=[d],l([c({type:String,attribute:"message-type"})],me.prototype,"messageType",void 0),l([c({type:String,attribute:"notification-level",reflect:!0})],me.prototype,"notificationLevel",void 0),l([c({type:String,attribute:"notification-id"})],me.prototype,"notificationId",void 0),l([c({type:String,attribute:"user-id"})],me.prototype,"userId",void 0),l([c({type:String,attribute:"user-name"})],me.prototype,"userName",void 0),l([c({type:String,attribute:"post-id"})],me.prototype,"postId",void 0),l([c({type:String,attribute:"comment-id"})],me.prototype,"commentId",void 0),l([c({type:String,attribute:"subreddit-id"})],me.prototype,"subredditId",void 0),l([c({type:String,attribute:"subreddit-name"})],me.prototype,"subredditName",void 0),l([c({type:Boolean,attribute:"is-hide-eligible"})],me.prototype,"isHideEligible",void 0),l([c({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],me.prototype,"isToggleUpdateFromSubredditEligible",void 0),l([c({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],me.prototype,"isToggleNotificationUpdateEligible",void 0),l([c({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],me.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),l([c({type:Boolean,attribute:"should-decouple-inbox-settings"})],me.prototype,"shouldDecoupleInboxSettings",void 0),l([c({type:Boolean,attribute:"is-mobile"})],me.prototype,"isMobile",void 0),l([c({type:Boolean,attribute:"is-m2-inbox-experiment"})],me.prototype,"isM2InboxExperiment",void 0),l([c({type:String,attribute:"followed-keyword-id"})],me.prototype,"followedKeywordId",void 0),l([c({type:String,attribute:"followed-keyword"})],me.prototype,"followedKeyword",void 0),l([h()],me.prototype,"isDialogOpened",void 0),me=l([p("notification-context-menu")],me);let be=class extends k{constructor(){super(...arguments),this.trackExitEvent=()=>{this.trackEvent()}}get miniInboxTooltip(){return document.querySelector(`#${V}`)}connectedCallback(){super.connectedCallback(),this.source=H,this.action="exit",this.noun="mini_inbox",this.miniInboxTooltip?.addEventListener(this.closeEventName,this.trackExitEvent)}disconnectedCallback(){super.disconnectedCallback(),this.miniInboxTooltip?.removeEventListener(this.closeEventName,this.trackExitEvent)}get closeEventName(){return`${this.miniInboxTooltip?.tagName.toLowerCase()}:close`}};be=l([p("notification-inbox-exit-tracker")],be);let ge=class extends(s(G)){constructor(){super(...arguments),this.fireReadAll=async()=>{try{this.trackEvent(q({badgeCount:this.getUnreadCount()})),w(a.InboxReadAllEvent),w(a.InboxCountChanged,0);const i=await e({operation:t.MarkPrivateMessageAsRead,variables:{input:{}}});i.data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector(`[data-id="${z}"]`)?.getCount()??0,this.dispatchErrorMessage=()=>{this.dispatchEvent(n("faceplate-alert",{level:r.error,cause:"uncategorized",message:"Something went wrong while marking all notifications as read"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return J` <slot></slot> `}};ge=l([p("mark-all-messages-read")],ge);let fe=class extends G{constructor(){super(...arguments),this.initialMessagesCount=0}async firstUpdated(){w(a.InboxCountChanged,this.initialMessagesCount),this.initialMessagesCount?navigator.setAppBadge?.(this.initialMessagesCount):navigator.clearAppBadge?.(),await e({operation:t.UpdateInboxActivitySeenState,variables:{input:{lastSentAt:this.lastSentAt?this.lastSentAt:(new Date).toISOString()}}})}render(){return Y}};l([c({type:Number,attribute:"initial-messages-count"})],fe.prototype,"initialMessagesCount",void 0),l([c({type:String,attribute:"last-sent-at"})],fe.prototype,"lastSentAt",void 0),fe=l([p("mark-all-notifications-seen")],fe);let ve=class extends(s(G)){constructor(){super(...arguments),this.announcementId="",this.isM2InboxExperiment=!1,this.isHidden=!1,this.observer=null,this.pubsub=new S(this),this.onClick=e=>{R(e)?e.preventDefault():this.removeUnreadState()},this.onHide=e=>{e===this.announcementId&&(this.isHidden=!0)},this.handleVisibilityChange=([{isIntersecting:e}])=>{if(e){if(this.hasBeenViewed)return void this.observer?.disconnect();const{title:e="",body:t=""}=this.notificationTelemetryData??{};this.trackEvent(U({notificationType:_,notificationId:this.announcementId,isViewed:!1,isClicked:!this.unreadChildElement,title:e,body:t})),this.observer?.disconnect()}},this.removeUnreadState=()=>{this.isM2InboxExperiment?this.unreadChildElement?.removeAttribute("selected"):this.unreadChildElement?.classList.remove(O)}}get hasBeenViewed(){return!!this.notificationTelemetryData?.viewedAt}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.onClick),this.pubsub.subscribe(a.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.subscribe(a.InboxReadAllEvent,this.removeUnreadState),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${A}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.onClick),this.pubsub.unsubscribe(a.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.unsubscribe(a.InboxReadAllEvent,this.removeUnreadState),this.observer?.disconnect()}firstUpdated(){if(!this.hasBeenViewed){const{title:e="",body:t=""}=this.notificationTelemetryData??{};this.trackEvent(D({notificationType:_,notificationId:this.announcementId,isViewed:!1,isClicked:!this.unreadChildElement,title:e,body:t}))}}get unreadChildElement(){return this.isM2InboxExperiment?this.querySelector("rpl-inbox-row[selected]"):this.querySelector(`.${O}`)}render(){return this.isHidden?Y:J`<slot></slot>`}};ve.styles=[d],l([c({type:String,attribute:"announcement-id"})],ve.prototype,"announcementId",void 0),l([c({type:Object,attribute:"notification-telemetry-data"})],ve.prototype,"notificationTelemetryData",void 0),l([c({type:Boolean,attribute:"is-m2-inbox-experiment"})],ve.prototype,"isM2InboxExperiment",void 0),l([h()],ve.prototype,"isHidden",void 0),ve=l([p("notification-announcement")],ve);class ye extends I{constructor(){super(...arguments),this.elevated=!1}render(){return J` <slot></slot> `}}l([c({type:Boolean})],ye.prototype,"elevated",void 0);var ke=te`${C}:host{--rpl-card-border-radius:var(--rem16);display:flex;flex-direction:column;background-color:var(--color-neutral-background-container);border-radius:var(--rpl-card-border-radius)}:host([elevated]){background-color:var(--color-neutral-background);box-shadow:var(--0,0) var(--1,1px) var(--2,2px) var(--0,0) var(--color-elevation-xsmall)}`;let we=class extends ye{};we.styles=ke,we=l([p("rpl-card")],we);class Se extends I{constructor(){super(...arguments),this.disabled=!1,this.hoverable=!1,this.selected=!1,this.forceTouchOnly=!1,this.role="button",this.inaccessibleHref="",this.handleClick=e=>{if(this.disabled)return void e.preventDefault();const t=e.target;t.closest("a, button")||t.closest('[slot="trailing"]')||t.closest('[slot="hover-actions"]')||t.closest("#hover-menu")||this.inaccessibleHref&&this.navigateTo(this.inaccessibleHref)}}connectedCallback(){super.connectedCallback(),(Se.isTouchOnly||this.forceTouchOnly)&&this.setAttribute("rpl-touch-only",""),this.addEventListener("click",this.handleClick)}navigateTo(e){window.location.assign(e)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.handleClick)}willUpdate(){this.setAttribute("aria-disabled",this.disabled?"true":"false"),this.setAttribute("role",this.role)}render(){return J` <div class="leading"><slot name="leading"></slot></div> <div class="content"><slot></slot></div> <div class="trailing"><slot name="trailing"></slot></div> <div id="hover-menu"> <rpl-card elevated> <slot name="hover-actions"></slot> </rpl-card> </div> `}}Se.isTouchOnly=ne(),l([c({type:Boolean,reflect:!0})],Se.prototype,"disabled",void 0),l([c({type:Boolean,reflect:!0})],Se.prototype,"hoverable",void 0),l([c({type:Boolean,reflect:!0})],Se.prototype,"selected",void 0),l([c({type:Boolean,reflect:!0,attribute:"force-touch-only"})],Se.prototype,"forceTouchOnly",void 0),l([c({type:String,reflect:!0})],Se.prototype,"role",void 0),l([c({type:String,reflect:!0})],Se.prototype,"inaccessibleHref",void 0);var Ie=te`${C}:host{display:flex;gap:var(--rem12);padding:var(--rem8) var(--rem16);position:relative}:host([hoverable]:not([disabled])){cursor:pointer}:host([selected]){background-color:var(--color-neutral-background-container-strong)}:host([disabled]){opacity:.5;pointer-events:none}:host(:not([rpl-touch-only]):not([disabled])[hoverable]:hover){background-color:var(--color-neutral-background-hover)}:host([selected]:not([rpl-touch-only]):not([disabled])[hoverable]:hover){background-color:var(--color-neutral-background-container-strong-hover)}#hover-menu{display:flex;opacity:0;position:absolute;top:0;right:0;transform:translateY(-60%);pointer-events:none;z-index:1}:host([disabled]) #hover-menu,:host([rpl-touch-only]) #hover-menu{display:none}:host(:focus-within:not([rpl-touch-only]):not([disabled])) #hover-menu,:host(:hover:not([rpl-touch-only]):not([disabled])) #hover-menu{opacity:1;pointer-events:auto}rpl-card{display:flex;flex-direction:row;padding:var(--rem2)}.content{min-width:0;display:flex;flex:1}.trailing{display:flex;align-items:center}`;let Ce=class extends Se{};Ce.styles=Ie,Ce=l([p("rpl-inbox-row")],Ce);let xe=class extends I{constructor(){super(...arguments),this.forceTouchOnly=!1,this.handleClick=e=>{e.stopPropagation()}}render(){return Se.isTouchOnly||this.forceTouchOnly?J`<slot></slot>`:Y}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.handleClick)}};l([c({type:Boolean,attribute:"force-touch-only"})],xe.prototype,"forceTouchOnly",void 0),xe=l([p("rpl-inbox-row-touch-only")],xe);let Ee=class extends G{constructor(){super(...arguments),this._rplCoachMarkRef=x()}get counterValue(){return parseInt(E.getItem(T.PmArchiveCoachmarkSeenCount)??"0")}shouldShow(){return this.counterValue<2}incrementCoachmarkCounter(){E.setItem(T.PmArchiveCoachmarkSeenCount,(this.counterValue+1).toString())}firstUpdated(e){this.shouldShow()&&(this._rplCoachMarkRef.value?.show(),this.incrementCoachmarkCounter())}render(){return J`<rpl-coachmark placement="bottom" appearance="inverted" ${N(this._rplCoachMarkRef)} .anchor="${this.querySelector(`#${this.anchorElemId}`)}"> <slot></slot> <rpl-coachmark-card auto-close slot="content" aria-live="polite" appearance="inverted" class="w-[220px]"> <span class="text-14" slot="title">Your private messages are now archived here</span> ${v({attributes:{"aria-label":"Close",slot:"close-button"},appearance:"plainInverted",leadingIcon:ee({size:Z.Small}),size:y.Small})} </rpl-coachmark-card> </rpl-coachmark>`}};Ee.styles=[d],l([c({type:String,attribute:"anchor-elem-id"})],Ee.prototype,"anchorElemId",void 0),Ee=l([p("pm-archive-entrypoint-coachmark")],Ee);
